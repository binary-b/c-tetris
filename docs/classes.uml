@startuml
'scale 2.0

'skinparam handwritten true
skinparam defaultFontName Monospace
skinparam classFontSize 18
skinparam defaultFontSize 14

package "struct" {
	class Pos <<(S,#fcd40a)>> {
		int x;
		int y;
	}
	class Rect <<(S,#fcd40a)>> {
		int x;
		int y;
		int width;
		int height;
	}
}

interface IClass {
	size_t size;
	{abstract} Object ctor ( Class class, va_list *app );
	{abstract} void dtor ();
	{abstract} Object clone ( Class obj );
	{abstract} bool differ ( Object obj1, Object obj2 );
	size_t sizeOf ( Object obj );
	void *typeOf ( Object obj );
}

class Object {
	new ( Class * );
}
class List {
	long length;
	new ();
	int addItem (Object obj);
	Object getItem (int id);
	bool rmItem (int id);
	void apply ( void (*f) (int id, void *obj) );
}
class Stack {
	long height;
	new ();
	bool put ( Object obj );
	void *getTop ();
	void rmTop ();
}

package event {
	enum mouse_button {
		MOUSE_NONE,
		MOUSE_RIGHT,
		MOUSE_LEFT,
		MOUSE_MIDDLE
	}
	enum direction {
		UP,
		DOWN,
		RIGHT,
		LEFT,
		CLOCKWISE,
		COURTER_CLOCKWISE
	}
	interface IEvent {
		{abstract} void zoomOnView ( Event ev, View view );
	}
	class Event {
		ALLEGRO_EVENT *alEvent;
		new ( ALLEGRO_EVENT *alEvent );
	}
	class ResizedEvent {
	}
	class MouseEvent {
		Pos pos;
		new ( Pos pos );
	}
	class MouseMoved {
	}
	class MouseEntered {
	}
	class MouseLeft {
	}
	class MouseButton {
		bool state;
		enum mouse_button button;
		new ( enum mouse_button button );
	}
	class MouseButtonDown {
	}
	class MouseButtonUp {
	}
	class KeyboardEvent {
	}
}
package gui {
	interface IGUIObj {
		{abstract} void draw ( GUIObj obj );
		{abstract} int update ( GUIObj obj );
	}
	interface IGUIHandler {
		{abstract} void event ( View view, Event ev );
	}
	class Window {
		Stack<View> views;
		Pos pos;
		Rect rect;
		new ( Rect rect );
		void addView ( View view );
	}
	class View {
		Rect rect;
		bool resizable;
		union Window or View context;
		new ( Rect rect );
		void zoomIn ( View view );
		void zoomRestore ( View view );
	}
	class Label {
		char *text;
		new ( char *text, int size );
	}
	class Image {
		new ( char *path );
	}
	class Button {
		Label label;
		Image image;
		void (*f) (Button button);
		new ( void (*f) (Button button) );
		call ( Button button );
	}
	class Container {
		addView ( View view );
	}
}

Object --* IClass

List --|> Object
Stack --|> Object

IGUIObj --|> IClass
IGUIHandler --|> IGUIObj

IEvent --|> IClass
Event --* IEvent

Event --|> Object
ResizedEvent --|> Event
MouseEvent --|> Event
KeyboardEvent --|> Event

MouseMoved --|> MouseEvent
MouseEntered --|> MouseEvent
MouseLeft --|> MouseEvent
MouseButton --|> MouseEvent
MouseButtonDown --|>MouseButton
MouseButtonUp --|>MouseButton

Window --* IGUIObj
Window --|> Object
View --* IGUIHandler
View --|> Object

Container	--|> View

Label --|> View
Button --|> View
Image --|> View

@enduml
