@startuml
scale 2.0

'skinparam handwritten true
skinparam defaultFontName Monospace
skinparam classFontSize 18
skinparam defaultFontSize 14

package "struct" {
	class Pos <<(S,#fcd40a)>> {
		int x;
		int y;
	}
	class Rect <<(S,#fcd40a)>> {
		int x;
		int y;
		int width;
		int height;
	}
	class Event <<(S,#fcd40a)>> {
		events type;
		Pos mousePos;
	}
	enum events {
		EV_ONCLICK
	}
	enum direction {
		UP,
		DOWN,
		RIGHT,
		LEFT,
		CLOCKWISE,
		COURTER_CLOCKWISE
	}
}
interface Class {
	size_t size;
	{abstract} Object ctor ( Class class, va_list *app );
	{abstract} void dtor ();
	{abstract} Object clone ( Class obj );
	{abstract} bool differ ( Object obj1, Object obj2 );
	size_t sizeOf ( Object obj );
}

class Object {
	new ( Class * );
}
class List {
	long length;
	new ();
	int addItem (Object obj);
	Object getItem (int id);
	bool rmItem (int id);
	void apply ( void f (void *obj, va_list *app) );
}
class Stack {
	long height;
	new ();
	bool put ( Object obj );
	void *getTop ();
	void rmTop ();
}

interface GUIObj {
	{abstract} void draw ( GUIObj obj );
	{abstract} int update ( GUIObj obj );
}
class Window {
	Stack<View> views;
	Pos pos;
	Rect rect;
	new ( Rect rect );
	void addView ( View view );
}
class View {
	Rect rect;
	Window window;
	new ( Rect rect );
	void zoomOn ( View view );
	void zoomRestore ( View view );
	{abstract} void event ( View view, Event ev );
}
class Menu {
	List<MenuItem> items;
	MenuItem active;
}
class MenuItem
class Button
class Game {
	bool board [h][w];
	Block active;
}
class Block {
	rotate ( direction );
}
class Container {
}

Object --* Class

List --|> Object
Stack --|> Object

GUIObj --|> Class

Window --* GUIObj
Window --|> Object
View --* GUIObj
View --|> Object

Menu --|> View
Game --|> View
Block --|> View
MenuItem --|> View
Container	--|> View

Button --|> MenuItem

@enduml
